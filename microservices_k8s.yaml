# User Service Application (user-service.js)
# Save this as user-service/app.js
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
data:
  app.js: |
    const express = require('express');
    const app = express();
    const port = process.env.PORT || 3001;

    app.use(express.json());

    // Mock user data
    let users = [
      { id: 1, name: 'John Doe', email: 'john@example.com' },
      { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
    ];

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.status(200).json({ status: 'healthy', service: 'user-service' });
    });

    // Get all users
    app.get('/users', (req, res) => {
      res.json(users);
    });

    // Get user by ID
    app.get('/users/:id', (req, res) => {
      const user = users.find(u => u.id === parseInt(req.params.id));
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }
      res.json(user);
    });

    // Create new user
    app.post('/users', (req, res) => {
      const newUser = {
        id: users.length + 1,
        name: req.body.name,
        email: req.body.email
      };
      users.push(newUser);
      res.status(201).json(newUser);
    });

    app.listen(port, () => {
      console.log(`User service running on port ${port}`);
    });

  package.json: |
    {
      "name": "user-service",
      "version": "1.0.0",
      "description": "User microservice",
      "main": "app.js",
      "scripts": {
        "start": "node app.js"
      },
      "dependencies": {
        "express": "^4.18.2"
      }
    }

---
# Order Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
data:
  app.js: |
    const express = require('express');
    const axios = require('axios');
    const app = express();
    const port = process.env.PORT || 3002;

    app.use(express.json());

    // Mock order data
    let orders = [
      { id: 1, userId: 1, product: 'Laptop', amount: 999.99 },
      { id: 2, userId: 2, product: 'Phone', amount: 599.99 }
    ];

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.status(200).json({ status: 'healthy', service: 'order-service' });
    });

    // Get all orders
    app.get('/orders', (req, res) => {
      res.json(orders);
    });

    // Get orders by user ID (with user service integration)
    app.get('/orders/user/:userId', async (req, res) => {
      try {
        const userId = parseInt(req.params.userId);
        const userOrders = orders.filter(o => o.userId === userId);
        
        // Call user service to get user details
        const userServiceUrl = process.env.USER_SERVICE_URL || 'http://user-service:3001';
        const userResponse = await axios.get(`${userServiceUrl}/users/${userId}`);
        
        res.json({
          user: userResponse.data,
          orders: userOrders
        });
      } catch (error) {
        if (error.response?.status === 404) {
          res.status(404).json({ error: 'User not found' });
        } else {
          res.status(500).json({ error: 'Internal server error' });
        }
      }
    });

    // Create new order
    app.post('/orders', (req, res) => {
      const newOrder = {
        id: orders.length + 1,
        userId: req.body.userId,
        product: req.body.product,
        amount: req.body.amount
      };
      orders.push(newOrder);
      res.status(201).json(newOrder);
    });

    app.listen(port, () => {
      console.log(`Order service running on port ${port}`);
    });

  package.json: |
    {
      "name": "order-service",
      "version": "1.0.0",
      "description": "Order microservice",
      "main": "app.js",
      "scripts": {
        "start": "node app.js"
      },
      "dependencies": {
        "express": "^4.18.2",
        "axios": "^1.4.0"
      }
    }

---
# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  labels:
    app: user-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: node:18-alpine
        ports:
        - containerPort: 3001
        env:
        - name: PORT
          value: "3001"
        command: ["/bin/sh"]
        args: ["-c", "cd /app && npm install && npm start"]
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: app-code
        configMap:
          name: user-service-config

---
# User Service Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  selector:
    app: user-service
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
  type: ClusterIP

---
# Order Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app: order-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
      - name: order-service
        image: node:18-alpine
        ports:
        - containerPort: 3002
        env:
        - name: PORT
          value: "3002"
        - name: USER_SERVICE_URL
          value: "http://user-service:3001"
        command: ["/bin/sh"]
        args: ["-c", "cd /app && npm install && npm start"]
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: app-code
        configMap:
          name: order-service-config

---
# Order Service Service
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-service
  ports:
    - protocol: TCP
      port: 3002
      targetPort: 3002
  type: ClusterIP

---
# API Gateway Service (LoadBalancer for external access)
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector:
    app: user-service  # You can create a proper API gateway later
  ports:
    - name: user-service
      protocol: TCP
      port: 80
      targetPort: 3001
  type: LoadBalancer

---
# Ingress for routing (optional - requires ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microservices-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: microservices.local
    http:
      paths:
      - path: /users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 3001
      - path: /orders
        pathType: Prefix
        backend:
          service:
            name: order-service
            port:
              number: 3002

---
# HorizontalPodAutoscaler for user-service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# HorizontalPodAutoscaler for order-service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: order-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: order-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70